
use import="Common"

var BUILD_NUMBER='9999'
var BASE_DIR="${Directory.GetCurrentDirectory()}"
var BUILD_DIR="${Path.Combine(BASE_DIR, "build")}"
var DIST_DIR="${Path.Combine(BASE_DIR, "dist")}"
var CONFIGURATION="Debug"



@{
	var appVeyorBuildNumber = System.Environment.GetEnvironmentVariable("APPVEYOR_BUILD_NUMBER");
	if(!string.IsNullOrEmpty(appVeyorBuildNumber))
		BUILD_NUMBER = appVeyorBuildNumber;
	System.Environment.SetEnvironmentVariable("DNX_BUILD_VERSION", BUILD_NUMBER, EnvironmentVariableTarget.Process);
}

log info="Build number: ${BUILD_NUMBER}"
log info="Base directory: ${BASE_DIR}"
log info="Build directory: ${BUILD_DIR}"
log info="Distribution directory: ${DIST_DIR}"

#default .prepare .compile .test

#ci .prepare .clean .config-release .compile .test .deploy

#prepare
	node-install
	bower-install
	gulp-install
	dnvm-install
	dnvm-use version='1.0.0-rc1-final'

#config-release
	@{
		CONFIGURATION="Release";
	}

#config-debug
	@{
		CONFIGURATION="Debug";
	}

#clean
	@{
		if(Directory.Exists(BUILD_DIR))
			Directory.Delete(BUILD_DIR, true);
		if(Directory.Exists(DIST_DIR))
			Directory.Delete(DIST_DIR, true);
	}

#compile
	dnu dnuCommand='restore "src"'
	dnu dnuCommand='publish "src/Skimur.Web/project.json" --configuration ${CONFIGURATION} -o "build/Web"'
	dnu dnuCommand='publish "src/Utilities/MirroredContentSync/project.json" --configuration ${CONFIGURATION} -o "build/MirroredContentSync"'

#test
	@{
		Log.Warn("TODO: Testing...");
	}

#deploy
	@{
		if(!Directory.Exists(DIST_DIR))
			Directory.CreateDirectory(DIST_DIR);

		var destination =  Path.Combine(DIST_DIR, "Web");

		if(!Directory.Exists(destination))
			Directory.CreateDirectory(destination);

		DirectoryCopy(Path.Combine(BUILD_DIR, "Web"), destination, true);

		destination =  Path.Combine(DIST_DIR, "MirroredContentSync");

		if(!Directory.Exists(destination))
			Directory.CreateDirectory(destination);

		DirectoryCopy(Path.Combine(BUILD_DIR, "MirroredContentSync"), destination, true);
	}

functions @{
	void DirectoryCopy(string sourceDirName, string destDirName, bool copySubDirs)
    {
        // Get the subdirectories for the specified directory.
        DirectoryInfo dir = new DirectoryInfo(sourceDirName);

        if (!dir.Exists)
        {
            throw new DirectoryNotFoundException(
                "Source directory does not exist or could not be found: "
                + sourceDirName);
        }

        DirectoryInfo[] dirs = dir.GetDirectories();
        // If the destination directory doesn't exist, create it.
        if (!Directory.Exists(destDirName))
        {
            Directory.CreateDirectory(destDirName);
        }

        // Get the files in the directory and copy them to the new location.
        FileInfo[] files = dir.GetFiles();
        foreach (FileInfo file in files)
        {
            string temppath = Path.Combine(destDirName, file.Name);
            file.CopyTo(temppath, false);
        }

        // If copying subdirectories, copy them and their contents to new location.
        if (copySubDirs)
        {
            foreach (DirectoryInfo subdir in dirs)
            {
                string temppath = Path.Combine(destDirName, subdir.Name);
                DirectoryCopy(subdir.FullName, temppath, copySubDirs);
            }
        }
    }
}