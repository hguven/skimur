var gulp = require('gulp');
var del = require('del');
var msbuild = require("gulp-msbuild");
var fs = require('fs');
var request = require('request');
var shell = require('gulp-shell');
var assemblyInfo = require('gulp-dotnet-assembly-info');
var change = require('gulp-change');
var path = require('path');

var buildConfiguration = "Debug";

var buildNumber = 9999;
if(process.env.APPVEYOR_BUILD_NUMBER)
    buildNumber = process.env.APPVEYOR_BUILD_NUMBER;
var versionNumber = "0.0.0." + buildNumber;

gulp.task('default', ['local'], function() {

});

gulp.task('local', ['compile', 'test'], function() {

});

gulp.task('ci', ['clean', 'config-release', 'local', 'dist'], function() {

});

gulp.task('clean', function() {
  return del([
    path.resolve(__dirname, 'build'),
    path.resolve(__dirname, 'dist')
  ]);
});

gulp.task('config-release', function() {
  buildConfiguration = "Release";
});

gulp.task('dist', ['dist-web', 'dist-sub-worker'], function() {
  
});

gulp.task('dist-web', function() {
  return gulp.src(path.resolve(__dirname, 'build', '_PublishedWebsites', 'Skimur.Web.Public') + "/**/*")
    .pipe(gulp.dest(path.resolve(__dirname, 'dist', 'web')))
});

gulp.task('dist-sub-worker', function() {
  return gulp.src(path.resolve(__dirname, 'build', 'Subs.Worker.Cons') + "/**/*")
    .pipe(gulp.dest(path.resolve(__dirname, 'dist', 'worker')))
});

gulp.task('compile', ['nuget-restore', 'version-assemblies'], function() {
  return gulp
    .src('**/*.sln')
    .pipe(msbuild({
      toolsVersion: 14.0,
      targets: ['Clean', 'Build'],
      errorOnFail: true,
      stdout: true,
      configuration: buildConfiguration,
      properties : {
        CI:true,
        OutputPath: path.resolve(__dirname, 'build')
      }
    }));
});

gulp.task('test', function() {
  // todo
});

gulp.task('version-assemblies', function() {
 return gulp
        .src('src/GlobalAssemblyInfo.cs')
        .pipe(change(function(content){
          return "using System.Reflection;\n\
//------------------------------------------------------------------------------\n\
// <auto-generated>\n\
//     This code was generated by a tool.\n\
//     Changes to this file may cause incorrect behavior and will be lost if\n\
//     the code is regenerated.\n\
// </auto-generated>\n\
//------------------------------------------------------------------------------\n\
[assembly: AssemblyVersion(\"" + versionNumber + "\")]\n\
[assembly: AssemblyFileVersion(\"" + versionNumber + "\")]\n\
[assembly: AssemblyCopyright(\"Copyright Skimur " + new Date().getYear() + "\")]\n\
[assembly: AssemblyProduct(\"Skimur\")]\n\
[assembly: AssemblyTrademark(\"Skimur\")]\n\
[assembly: AssemblyCompany(\"\")]\n\
[assembly: AssemblyConfiguration(\"" + buildConfiguration + "\")]\n\
[assembly: AssemblyInformationalVersion(\"" + buildConfiguration + "\")]"
        }))
        .pipe(gulp.dest('src'));
});

gulp.task('nuget-download', function(done) {
    if(fs.existsSync('nuget.exe')) {
        done();
        return;
    }
    request.get('http://nuget.org/nuget.exe')
        .pipe(fs.createWriteStream('nuget.exe'))
        .on('close', done);
});

gulp.task('nuget-restore', ['nuget-download'], function() {
	return gulp.src('**/*.sln', {read: false})
    .pipe(shell([
      'nuget restore <%= (file.path) %>'
    ]))
});