@using Subs
@using Subs.ReadModel
@model PostWrapped

<div class="disc post @ApprovedRemovedClass(Model) @IgnoreUnignoredClass(Model)" data-post-id="@Model.Post.Id">
    <div class="disc-body">
        <div class="disc-left">
            <div class="disc-voting @(Model.CurrentUserVote != null ? Model.CurrentUserVote == VoteType.Down ? "voted-down" : "voted-up" : "")">
                <span class="up login-required" onclick="return skimurui.posts.voteUp(this)"></span>
                <span class="votes">@(Model.Post.VoteUpCount - Model.Post.VoteDownCount)</span>
                <span class="down login-required" onclick="return skimurui.posts.voteDown(this)"></span>
            </div>
        </div>
        <div class="disc-main">
            <div class="disc-heading">
                <a class="link" href="@PostUrl(Model)">@Model.Post.Title</a>
                @if (Model.Verdict.HasValue)
                {
                    if (Model.Verdict == Verdict.ModApproved)
                    {
                        <span class="verdict approved"></span>
                    }
                    else if (Model.Verdict == Verdict.ModRemoved)
                    {
                        <span class="verdict removed"></span>
                    }
                    else
                    {
                        <span class="verdict none"></span>
                    }
                }
                @(DomainLink(Model))
            </div>
            <div class="disc-tagline">
                Posted @Html.Age(Model.Post.DateCreated) ago by <a href="/user/@Model.Author.UserName">@Model.Author.UserName</a> to <a href="@Url.Sub(Model.Sub.Name)">/s/@Model.Sub.Name</a>
            </div>
            <ul class="disc-options">
                <li class="first comments">
                    <a href="@Url.Post(Model.Sub, Model.Post)">@(Model.Post.NumberOfComments > 0 ? (Model.Post.NumberOfComments == 1 ? "1 comment" : Model.Post.NumberOfComments + " comments") : "comment")</a>
                </li>
                @if (Model.CanManage)
                {
                    <li class="remove">
                        <a href="javascript:void(0);" onclick="return skimurui.posts.remove(this)" class="delete">remove</a>
                    </li>
                    <li class="approve">
                        <a href="javascript:void(0);" onclick="return skimurui.posts.approve(this)" class="delete">approve</a>
                    </li>
                }
                @if (Model.CanReport)
                {
                    <li class="report">
                        <a href="javascript:void(0);" onclick="return skimurui.posts.report(this);">report</a>
                    </li>
                }
                @if (Model.CanManage)
                {
                    if (Model.Reports != null && Model.Reports.Count > 0)
                    {
                        <li class="reports">
                            <a href="javascript:void(0);" onclick="return skimurui.posts.toggleReports(this);">reports (@Model.Reports.Count)</a>
                        </li>
                        <li class="clear-reports">
                            <a href="javascript:void(0);" onclick="return skimurui.posts.clearReports(this);">clear reports</a>
                        </li>
                    }
                    <li class="ignore-reports">
                        <a href="javascript:void(0);" onclick="return skimurui.posts.ignoreReports(this);">ignore reports</a>
                    </li>
                    <li class="unignore-reports">
                        <a href="javascript:void(0);" onclick="return skimurui.posts.unignoreReports(this);">unignore reports</a>
                    </li>
                }
            </ul>
            @if (Model.CanManage && Model.Reports != null && Model.Reports.Count > 0)
            {
                <div class="disc-reports hidden">
                    @foreach (var report in Model.Reports)
                    {
                        <div class="report-summary">
                            <b>Reports:</b><br />
                            @report.Reason&nbsp;
                            @if (!string.IsNullOrEmpty(report.UserName))
                            {
                                <text>(reported by <a href="@Url.User(report.UserName)">@report.UserName</a>)</text>
                            }
                        </div>
                    }
                </div>
            }
            <div class="disc-staging"></div>
        </div>
    </div>
</div>

@helper ApprovedRemovedClass(PostWrapped post)
{
    if (post.Verdict.HasValue)
    {
        if (post.Verdict == Verdict.ModApproved)
        {
            @("approved")
        }
        else if (post.Verdict == Verdict.ModRemoved)
        {
            @("removed")
        }
    }
}

@helper IgnoreUnignoredClass(PostWrapped post)
{
    if (post.CanManage)
    {
        @(post.Post.IgnoreReports ? "reports-ignored" : "reports-unignored")
    }
}

@helper DomainLink(PostWrapped post)
{
    if (post.Post.PostType == PostType.Link)
    {
        if (!string.IsNullOrEmpty(post.Post.Domain))
        {
            <a class="domain" href="@Url.Domain(post.Post.Domain)">(@post.Post.Domain)</a>
        }
    }
    else if (post.Post.PostType == PostType.Text)
    {
        <a class="domain" href="@Url.Post(Model.Sub, Model.Post)">(self.@post.Sub.Name)</a>
    }
}
@helper PostUrl(PostWrapped post)
{
    if (post.Post.PostType == PostType.Link)
    {
        @post.Post.Url
    }
    else if (post.Post.PostType == PostType.Text)
    {
        @Url.Post(post.Sub, post.Post)
    }
}